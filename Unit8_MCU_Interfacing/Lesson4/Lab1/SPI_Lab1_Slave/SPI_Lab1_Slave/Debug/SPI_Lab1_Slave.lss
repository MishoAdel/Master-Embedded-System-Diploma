
SPI_Lab1_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088b  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_Slave_Init 00000014  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_Slave_Recieve 0000000a  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000036  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_Slave_Init:

000000b8 <SPI_Slave_Init>:
#define F_CPU 1000000UL  
#include <avr/io.h>
#include "util/delay.h"

void SPI_Slave_Init(){
	DDRB &= ~(1<<4)|(1<<5)|(1<<7);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	8f 7e       	andi	r24, 0xEF	; 239
  bc:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<6);
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE);
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8d b9       	out	0x0d, r24	; 13
  ca:	08 95       	ret

Disassembly of section .text.SPI_Slave_Recieve:

000000cc <SPI_Slave_Recieve>:
	}

unsigned char SPI_Slave_Recieve(unsigned char Sdata){
	SPDR=Sdata;
  cc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  ce:	77 9b       	sbis	0x0e, 7	; 14
  d0:	fe cf       	rjmp	.-4      	; 0xce <SPI_Slave_Recieve+0x2>
	return SPDR;
  d2:	8f b1       	in	r24, 0x0f	; 15
}
  d4:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
  6c:	cf 93       	push	r28
	unsigned char i;
	SPI_Slave_Init();
  6e:	0e 94 5c 00 	call	0xb8	; 0xb8 <SPI_Slave_Init>
	DDRA=0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8a bb       	out	0x1a, r24	; 26
   for(i=255;i>0;i--){
  76:	cf ef       	ldi	r28, 0xFF	; 255
  78:	0e c0       	rjmp	.+28     	; 0x96 <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f e3       	ldi	r18, 0x3F	; 63
  7c:	8d e0       	ldi	r24, 0x0D	; 13
  7e:	93 e0       	ldi	r25, 0x03	; 3
  80:	21 50       	subi	r18, 0x01	; 1
  82:	80 40       	sbci	r24, 0x00	; 0
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
	   _delay_ms(1000);
	   PORTA=SPI_Slave_Recieve(i);
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_Slave_Recieve>
  92:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	unsigned char i;
	SPI_Slave_Init();
	DDRA=0xFF;
   for(i=255;i>0;i--){
  94:	c1 50       	subi	r28, 0x01	; 1
  96:	c1 11       	cpse	r28, r1
  98:	f0 cf       	rjmp	.-32     	; 0x7a <main+0xe>
	   _delay_ms(1000);
	   PORTA=SPI_Slave_Recieve(i);
   }
   return 0;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000de <_fini>:
  de:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000e0 <__funcs_on_exit>:
  e0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e2 <__simulator_exit>:
  e2:	08 95       	ret

Disassembly of section .text.exit:

000000a2 <exit>:
  a2:	ec 01       	movw	r28, r24
  a4:	0e 94 70 00 	call	0xe0	; 0xe0 <__funcs_on_exit>
  a8:	0e 94 6f 00 	call	0xde	; 0xde <_fini>
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 71 00 	call	0xe2	; 0xe2 <__simulator_exit>
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 6d 00 	call	0xda	; 0xda <_Exit>

Disassembly of section .text._Exit:

000000da <_Exit>:
  da:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
