
SPI_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087f  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_Master_Init 00000014  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.SPI_Master_Send 0000000a  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000028  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000094  00000094  00000108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_Master_Init:

000000aa <SPI_Master_Init>:
#define F_CPU 1000000UL 
#include <avr/io.h>
#include "util/delay.h"

void SPI_Master_Init(){
	DDRB |= (1<<4)|(1<<5)|(1<<7);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	80 6b       	ori	r24, 0xB0	; 176
  ae:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<6);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  b6:	8d b1       	in	r24, 0x0d	; 13
  b8:	81 65       	ori	r24, 0x51	; 81
  ba:	8d b9       	out	0x0d, r24	; 13
  bc:	08 95       	ret

Disassembly of section .text.SPI_Master_Send:

000000be <SPI_Master_Send>:
	}

unsigned char SPI_Master_Send(unsigned char Sdata){
	SPDR=Sdata;
  be:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <SPI_Master_Send+0x2>
	return SPDR;
  c4:	8f b1       	in	r24, 0x0f	; 15
}
  c6:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

int main(void)
{
	unsigned char i;
	SPI_Master_Init();
  6c:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_Master_Init>
	DDRA=0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
   for(i=0;i<256;i++){
  74:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	8d e0       	ldi	r24, 0x0D	; 13
  7a:	93 e0       	ldi	r25, 0x03	; 3
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
	   _delay_ms(1000);
	   PORTA=SPI_Master_Send(i);
  88:	8c 2f       	mov	r24, r28
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_Master_Send>
  8e:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	unsigned char i;
	SPI_Master_Init();
	DDRA=0xFF;
   for(i=0;i<256;i++){
  90:	cf 5f       	subi	r28, 0xFF	; 255
  92:	f1 cf       	rjmp	.-30     	; 0x76 <main+0xa>

Disassembly of section .text.__dummy_fini:

000000d0 <_fini>:
  d0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000d2 <__funcs_on_exit>:
  d2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d4 <__simulator_exit>:
  d4:	08 95       	ret

Disassembly of section .text.exit:

00000094 <exit>:
  94:	ec 01       	movw	r28, r24
  96:	0e 94 69 00 	call	0xd2	; 0xd2 <__funcs_on_exit>
  9a:	0e 94 68 00 	call	0xd0	; 0xd0 <_fini>
  9e:	ce 01       	movw	r24, r28
  a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <__simulator_exit>
  a4:	ce 01       	movw	r24, r28
  a6:	0e 94 66 00 	call	0xcc	; 0xcc <_Exit>

Disassembly of section .text._Exit:

000000cc <_Exit>:
  cc:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
