
SPI_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093b  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060b  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.SPI_Master_Init 0000000e  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Segment_CTRL 0000001a  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000050  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_Master_Init:

000000ec <SPI_Master_Init>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void SPI_Master_Init(){
	DDRB |= (1<<4)|(1<<5)|(1<<7);
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	80 6b       	ori	r24, 0xB0	; 176
  f0:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  f2:	8d b1       	in	r24, 0x0d	; 13
  f4:	81 65       	ori	r24, 0x51	; 81
  f6:	8d b9       	out	0x0d, r24	; 13
  f8:	08 95       	ret

Disassembly of section .text.Segment_CTRL:

000000bc <Segment_CTRL>:
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
}

void Segment_CTRL(unsigned char cmd, unsigned char data){
	PORTB &=~(1<<4);
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9f 7e       	andi	r25, 0xEF	; 239
  c0:	98 bb       	out	0x18, r25	; 24
	SPDR=cmd;
  c2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  c4:	77 9b       	sbis	0x0e, 7	; 14
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <Segment_CTRL+0x8>
	SPDR=data;
  c8:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <Segment_CTRL+0xe>
	PORTB |=(1<<4);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:

unsigned char SPI_Master_Send(unsigned char Sdata){
	SPDR=Sdata;
	while(!(SPSR & (1<<SPIF)));
	return SPDR;
}
  6c:	0e 94 76 00 	call	0xec	; 0xec <SPI_Master_Init>
  70:	6f ef       	ldi	r22, 0xFF	; 255
  72:	89 e0       	ldi	r24, 0x09	; 9
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <Segment_CTRL>
  78:	67 e0       	ldi	r22, 0x07	; 7
  7a:	8b e0       	ldi	r24, 0x0B	; 11
  7c:	0e 94 5e 00 	call	0xbc	; 0xbc <Segment_CTRL>
  80:	6f e0       	ldi	r22, 0x0F	; 15
  82:	8a e0       	ldi	r24, 0x0A	; 10
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <Segment_CTRL>
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	0e 94 5e 00 	call	0xbc	; 0xbc <Segment_CTRL>
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	c1 e0       	ldi	r28, 0x01	; 1
  94:	10 c0       	rjmp	.+32     	; 0xb6 <main+0x4a>
  96:	d1 e0       	ldi	r29, 0x01	; 1
  98:	d6 0f       	add	r29, r22
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 5e 00 	call	0xbc	; 0xbc <Segment_CTRL>
  a0:	2f e3       	ldi	r18, 0x3F	; 63
  a2:	8d e0       	ldi	r24, 0x0D	; 13
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	6d 2f       	mov	r22, r29
  b6:	c9 30       	cpi	r28, 0x09	; 9
  b8:	70 f3       	brcs	.-36     	; 0x96 <main+0x2a>
  ba:	eb cf       	rjmp	.-42     	; 0x92 <main+0x26>

Disassembly of section .text.__dummy_fini:

00000102 <_fini>:
 102:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000104 <__funcs_on_exit>:
 104:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000106 <__simulator_exit>:
 106:	08 95       	ret

Disassembly of section .text.exit:

000000d6 <exit>:
  d6:	ec 01       	movw	r28, r24
  d8:	0e 94 82 00 	call	0x104	; 0x104 <__funcs_on_exit>
  dc:	0e 94 81 00 	call	0x102	; 0x102 <_fini>
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 83 00 	call	0x106	; 0x106 <__simulator_exit>
  e6:	ce 01       	movw	r24, r28
  e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_Exit>

Disassembly of section .text._Exit:

000000fe <_Exit>:
  fe:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
